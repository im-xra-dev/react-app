import {
  PostListProps,
  PostListViews,
  TimelineState,
  tlineObj,
  tlineStructure
} from "../../components/PostList/types";
import { Dispatch, SetStateAction } from "react";

export function queryTimelineObject(
  ctx: TimelineState,
  settimelineStateData: Dispatch<SetStateAction<TimelineState>>,
  setMessage: Dispatch<SetStateAction<String>>
): void {
  const requestOptions = {
    method: "POST",
    // headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ timeline: true, xml: false, tObj: ctx.object })
  };
  fetch("http://localhost:8081/API/get-posts", requestOptions)
    .then((response) => response.json())
    .then((rawData) => {
      setMessage("");
      settimelineStateData({
        error: rawData.error,
        responseCode: rawData.responseCode,
        data: [...ctx.data, ...rawData.data],
        object: rawData.object,
        recipeDataResolved: rawData.recipeDataResolved
      } as TimelineState);
    });
}

export function newTimelineState(id: PostListViews, options: PostListProps): TimelineState {
  //home route is user-customised.
  //tObj is optional and generated by servers
  if (id === "home") return newLineState(undefined);
  const tObj = newTObj();

  if (id === "s") tObj.secs[options.id] = newDateObj();
  else if (id === "profile") tObj.users[options.id] = newDateObj();
  else if (id === "search") console.log("search not implemented");

  return newLineState(tObj);
}

//generate new object elements
const newLineState = (tObj): TimelineState => ({
  data: [],
  error: false,
  object: tObj,
  recipeDataResolved: [],
  responseCode: -1
});
const newTObj = (): tlineObj => ({
  iter: 0,
  secs: {},
  prio_usr: [],
  reco_usr: [],
  prio_sec: [],
  reco_sec: [],
  promo: [],
  users: {}
});
const newDateObj = (): tlineStructure => ({ date: new Date().getTime() });

