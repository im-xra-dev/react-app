import {
  PostListProps,
  PostListViews,
  TimelineState,
  tlineObj,
  tlineStructure,
} from '../../components/PostList/types';
import { Dispatch, SetStateAction } from 'react';
import { API_JSON_QUERY } from '../../utils/api_handler/interface';

/**Queries for the next chunk of the timeline
 * updates storage state on query complete
 *
 * @param ctx
 * @param setTimelineStateData
 * @param setMessage
 * @param mock
 */
export function queryTimelineObject(
  ctx: TimelineState,
  setTimelineStateData: Dispatch<SetStateAction<TimelineState>>,
  setMessage: Dispatch<SetStateAction<String>>,
  mock?: { _: TimelineState },
): void {
  //query API then update the "loading" message and set the new state
  API_JSON_QUERY(
    'get-posts',
    {
      timeline: true,
      xml: false,
      tObj: ctx.object,
    },
    mock,
  ).then((rawData: { error: boolean }) => {
    //handle errors
    if (rawData.error)
      return setMessage('There was an error contacting the server :(');

    //update state
    const validData = rawData as TimelineState;
    validData.data = [].concat(ctx.data, validData.data);
    setTimelineStateData(validData);
    setMessage('');
  });
}

/**Initializes a new context of a timeline
 *
 * @param id
 * @param options
 */
export function newTimelineState(
  id: PostListViews,
  options: PostListProps,
): TimelineState {
  //home route is user-customised.
  //tObj is optional and generated by servers
  if (id === 'home') return newStateFromTObj(undefined);

  //route specific modifications to the tObj
  const tObj = newTObj();
  if (id === 's') tObj.secs[options.id] = newDateObj();
  else if (id === 'profile') tObj.users[options.id] = newDateObj();
  else if (id === 'search') console.log('SearchPage not implemented');

  //wrap it
  return newStateFromTObj(tObj);
}

//
//generate new default instances of objects\\
//
export function newStateFromTObj(tObj): TimelineState {
  return {
    data: [],
    error: false,
    object: tObj,
    recipeDataResolved: [],
    responseCode: -1,
  };
}

function newTObj(): tlineObj {
  return {
    iter: 0,
    secs: {},
    prio_usr: [],
    reco_usr: [],
    prio_sec: [],
    reco_sec: [],
    promo: [],
    users: {},
  };
}

function newDateObj(): tlineStructure {
  return {
    date: new Date().getTime(),
  };
}

//-----------------------------------------\\
